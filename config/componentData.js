module.exports = [{"name":"TreeComponent","description":"","props":{"hierarchyJson":{"type":{"name":"object"},"required":true,"description":"Hierarchy Json String sent by the server"},"functionMode":{"type":{"name":"number"},"required":true,"description":"Available modes are 1:Market-Only 2:Push-Sub_Flag 3:Expand_Rests 4: AuditLog"},"htmlId":{"type":{"name":"string"},"required":true,"description":"HTML ID prop"},"pushLabelValue":{"type":{"name":"string"},"required":false,"description":"Label value for include sub levels. React cannot acccess I18n directly. Only use on mode 2"},"unpushAlertText":{"type":{"name":"string"},"required":true,"description":"Alert text for no nodes chosen to unpush"},"pushAlertText":{"type":{"name":"string"},"required":true,"description":"Alert text for no nodes chosen to unpush"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport RfmTree from './internal/rfmtree';\nimport AssignedRfmTree from './internal/assignedrfmtree';\nimport { StyleRoot }  from 'radium';\nimport decorators from './internal/decorators';\nimport assigneddecorators from './internal/assigneddecorators';\nimport './internal/themes/index.css';\nimport styles from './internal/sample/styles';\nimport * as filters from './internal/utils/filter';\n\ndecorators.Header = ({style, node}) => {\n    let folderIcon = null;\n    let chosenStyle = {color : '#e0d665'};\n\n    if(!node.toggled){\n        folderIcon = 'glyphicon glyphicon-folder-close';\n    }\n    else{\n        folderIcon = 'glyphicon glyphicon-folder-open';\n    }\n\n    const iconType = node.leaf !== 1 ? folderIcon  : 'glyphicon glyphicon-cutlery' ;\n\n    return (\n        <div style={style.base}>\n            <div style={style.title}>\n                <span className={iconType} style={chosenStyle} aria-hidden=\"true\"></span>\n            </div>\n        </div>\n    );\n};\n\nassigneddecorators.Header = ({style, node}) => {\n    let chosenStyle = {color : '#e0d665'};\n\n    return (\n        <div style={style.base}>\n            <div style={style.title}>\n                <span style={chosenStyle} aria-hidden=\"true\"></span>\n            </div>\n        </div>\n    );\n};\n\nclass PushSubFlag extends React.Component {\n  render(){\n    let label = this.props.pushLabelValue;\n    return (\n      <div className=\"row text-center\" style={styles.hierarachybuttons}>\n          <button onClick={this.props.pushNodeSubLvl} >\n              <span className=\"glyphicon glyphicon-chevron-right\" />\n              <span><b>{label}</b></span>\n          </button>\n      </div>\n    )\n  }\n}\n\nPushSubFlag.propTypes = {\n    pushLabelValue: PropTypes.string\n}\n\nclass PushButton extends React.Component {\n    render(){\n        let fval = this.props.functionval;\n        let buttonSub = null;\n        if(fval === 2){\n          buttonSub = <PushSubFlag pushLabelValue={this.props.pushLabelValue}\n                        pushNodeSubLvl={this.props.pushNodeSubLvl} />;\n        }\n        return (\n              <div>\n                  <div className=\"row text-center\"  style={styles.hierarachybuttons}>\n                      <button onClick={this.props.pushNode}>\n                          <span className=\"glyphicon glyphicon-chevron-right\" />\n                      </button>\n                  </div>\n              <div>\n                  {buttonSub}\n              </div>\n                  <div className=\"row text-center\" style={styles.hierarachybuttons}>\n                      <button onClick={this.props.unpushNode}>\n                          <span className=\"glyphicon glyphicon-chevron-left\" />\n                      </button>\n                  </div>\n              </div>\n          );\n    }\n}\nPushButton.propTypes = {\n    pushNode: PropTypes.func.isRequired,\n    unpushNode: PropTypes.func.isRequired,\n    functionval: PropTypes.number.isRequired,\n    pushLabelValue: PropTypes.string.isRequired,\n    pushNodeSubLvl : PropTypes.func.isRequired\n};\n\nclass PushDouble extends React.Component {\n    render(){\n      let functionval = this.props.functionval;\n\n      if(functionval === 2 || functionval === 4 ){\n        return null;\n      }\n        return (\n            <div>\n                <div className=\"row text-center\" style={styles.hierarachybuttons}>\n                    <button onClick={this.props.pushNodeAll}>\n                        <span className=\"glyphicon glyphicon-chevron-right\" />\n                        <span className=\"glyphicon glyphicon-chevron-right\" />\n                    </button>\n                </div>\n                <div className=\"row text-center\" style={styles.hierarachybuttons}>\n                    <button  onClick={this.props.unpushNodeAll}>\n                        <span className=\"glyphicon glyphicon-chevron-left\" />\n                        <span className=\"glyphicon glyphicon-chevron-left\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\nPushDouble.propTypes = {\n    unpushNodeAll: PropTypes.func.isRequired,\n    pushNodeAll: PropTypes.func.isRequired,\n    functionval: PropTypes.number.isRequired\n};\n\nclass NodeViewer extends React.Component {\n    render() {\n        let hiddennStyle = {visibility : 'hidden', display: 'none'};\n        let json = JSON.stringify(this.props.node, null, 4);\n\n        if (!json) {\n            json = \"help\";\n        }\n\n        return <div style={hiddennStyle}>\n        <input type=\"hidden\" id=\"newJsonValue\" data-value={json} />\n        </div>;\n    }\n}\nNodeViewer.propTypes = {\n    node: PropTypes.object\n};\n\n\nclass TreeComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        //Perf.start();\n        this.state = {data:this.props.hierarchyJson, selectednodes: [], chosennodes:[], nodesToUnpush:[]};\n        this.onToggle = this.onToggle.bind(this);\n        this.onToggle2 = this.onToggle2.bind(this);\n        this.onToggle3 = this.onToggle3.bind(this);\n        this.onPush = this.onPush.bind(this);\n        this.onPushSubLevel = this.onPushSubLevel.bind(this);\n        this.onUnpushNode = this.onUnpushNode.bind(this);\n        this.onUnpushNode2 = this.onUnpushNode2.bind(this);\n        this.onpushNode2 = this.onpushNode2.bind(this);\n        this.test = this.test.bind(this);\n        this.selectFromAssignment = this.selectFromAssignment.bind(this);\n    }\n\n    componentDidUpdate() {\n      //Perf.stop()\n      //Perf.printInclusive()\n      //Perf.printWasted()\n    }\n\n    onToggle(node, toggled) {\n        const {cursor} = this.state;\n\n        if (cursor) {\n            cursor.active = false;\n        }\n\n        node.active = true;\n        if (node.children) {\n            node.toggled = toggled;\n        }\n\n        this.setState({cursor: node});\n    }\n\n\n    onToggle2(node, toggled) {\n      if(node.pushed === true || node.blocked === true){\n        return;\n      }\n      node.chosen = !node.chosen;\n      this.setState({cursor: node});\n    }\n\n\n    onToggle3(node, toggled) {\n      if(node.chosenToUnpush === undefined){\n        node.chosenToUnpush = true;\n      }else{\n        node.chosenToUnpush = !node.chosenToUnpush;\n      }\n      this.setState({cursor: node});\n    }\n\n    test(obj){\n      alert(obj);\n    }\n\n    selectFromAssignment(obj){\n            let unpushed = [];\n            if(this.state.nodesToUnpush !== undefined ){\n              unpushed = this.state.nodesToUnpush;\n            }\n            if(obj.selected === undefined){\n                obj.selected = true;\n            }\n            else{\n              obj.selected = !obj.selected;\n            }\n\n            if(obj.selected === true){\n              unpushed.push(obj.id);\n            }else{\n              var index = unpushed.indexOf(obj.id);\n              if(index !== -1){\n                  unpushed.splice(index,1);\n              }\n          }\n            this.setState({nodesToUnpush:unpushed})\n    }\n\n    onFilterMouseUp(e) {\n        const filter = e.target.value.trim();\n        if (!filter) {\n            return this.setState({data:this.props.hierarchyJson});\n        }\n        var filtered = filters.filterTree(this.props.hierarchyJson, filter);\n        filtered = filters.expandFilteredNodes(filtered, filter);\n        this.setState({data: filtered});\n    }\n\n    onUnpushNode(event){\n      const tree = [];\n      const unpushAlertText = this.props.unpushAlertText;\n      tree.push(this.state.data);\n      let counter = filters.unpushAllAssignedNodes(tree,unpushAlertText,0 );\n      if(counter === 0 ){\n        alert(unpushAlertText);\n      }\n      this.setState({data:tree[0]});\n    }\n\n    onpushNode2(e){\n      const tree = [];\n      tree.push(this.state.data);\n      filters.pushAllNodes(tree);\n      this.setState({data:tree[0]});\n    }\n\n    onUnpushNode2(e){\n      const tree = [];\n      tree.push(this.state.data);\n      filters.unpushAllNodes(tree);\n      this.setState({data:tree[0],selectednodes:[], selectednodesid:[],selectedNodeNames:[]});\n    }\n\n    onPush(event){\n        const tree = [];\n        const pushAlertText = this.props.pushAlertText;\n        tree.push(this.state.data);\n        var chosennodes =  filters.getChosenNodes(tree);\n\n        if(chosennodes.length === 0){\n          alert(pushAlertText);\n          return;\n        }\n\n        let previousNodes = this.state.selectednodes;\n        let resultNames = [];\n        let resultNodes = [];\n\n        if(this.state.selectednodesid !== undefined && this.state.selectednodesid != null){\n              resultNodes = this.state.selectednodesid ;\n        }\n\n        if(this.state.selectedNodeNames !== undefined && this.state.selectedNodeNames != null){\n              resultNames = this.state.selectedNodeNames ;\n        }\n\n        chosennodes.forEach(node => {\n            previousNodes.push(node);\n            resultNames = resultNames.concat([node.name]);\n            resultNodes = resultNodes.concat([node.id]);\n        })\n\n        this.setState({selectednodes: previousNodes, selectednodesid:resultNodes, data:tree[0], selectedNodeNames:resultNames, updateSelection:true});\n    }\n\n\n    onPushSubLevel(e){\n        const tree = [];\n        const pushAlertText = this.props.pushAlertText;\n        tree.push(this.state.data);\n        var chosennodes =  filters.getChosenNodesWithSubLevel(tree);\n\n        if(chosennodes.length === 0){\n          alert(pushAlertText);\n          return;\n        }\n\n        let previousNodes = this.state.selectednodes;\n        let resultNames = [];\n        let resultNodes = [];\n\n        if(this.state.selectednodesid !== undefined && this.state.selectednodesid != null){\n              resultNodes = this.state.selectednodesid ;\n        }\n\n        if(this.state.selectedNodeNames !== undefined && this.state.selectedNodeNames != null){\n              resultNames = this.state.selectedNodeNames ;\n        }\n\n        chosennodes.forEach(node => {\n            previousNodes.push(node);\n            resultNames = resultNames.concat([node.name]);\n            resultNodes = resultNodes.concat([node.id]);\n        })\n\n        this.setState({selectednodes: previousNodes, selectednodesid:resultNodes, data:tree[0], selectedNodeNames:resultNames, updateSelection:true});\n    }\n\n    render() {\n        const {data: stateData, chosennodes} = this.state;\n        const selectednodes = this.state.selectednodes;\n        const funcMode = this.props.functionMode;\n        const labelText = this.props.pushLabelValue;\n        const unpushAlertText = this.props.unpushAlertText;\n        const pushAlertText = this.props.pushAlertText;\n        return (\n            <StyleRoot>\n              <div className=\"allboxholder\">\n                <div className=\"row\">\n                    <div className=\"col-lg-5\" style={styles.searchBoxPad}>\n                        <input className=\"form-control\"\n                               onKeyUp={this.onFilterMouseUp.bind(this)}\n                               placeholder=\"Search the tree...\"\n                               type=\"text\"/>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-5 rfmtreebox\" style={styles.component}>\n                        <RfmTree data={stateData}\n                                 selectednodes={selectednodes}\n                                 decorators={decorators}\n                                 onToggle={this.onToggle}\n                                 onToggle2={this.onToggle2}\n                                 chosennodes={chosennodes}/>\n                    </div>\n                    <div className=\"col-lg-2\">\n                        <PushButton pushNode={this.onPush} functionval={funcMode}\n                                    pushNodeSubLvl={this.onPushSubLevel}\n                                    unpushNode={this.onUnpushNode}\n                                    pushLabelValue={labelText}\n                                    pushAlertText={pushAlertText} />\n                        <PushDouble functionval={funcMode} unpushNodeAll={this.onUnpushNode2}\n                                    pushNodeAll={this.onpushNode2}\n                                    unpushAlertText={unpushAlertText}/>\n                    </div>\n                  \n                </div>\n              </div>\n            </StyleRoot>\n        );\n    }\n}\n\nTreeComponent.propTypes = {\n    /**     Hierarchy Json String sent by the server  */\n    hierarchyJson: PropTypes.object.isRequired,\n\n    /**     Available modes are 1:Market-Only 2:Push-Sub_Flag 3:Expand_Rests 4: AuditLog */\n    functionMode: PropTypes.number.isRequired,\n\n    /**     HTML ID prop     */\n    htmlId: PropTypes.string.isRequired,\n\n    /**    Label value for include sub levels. React cannot acccess I18n directly. Only use on mode 2    */\n    pushLabelValue: PropTypes.string,\n\n    /** Alert text for no nodes chosen to unpush */\n    unpushAlertText: PropTypes.string.isRequired,\n\n    /** Alert text for no nodes chosen to unpush */\n    pushAlertText: PropTypes.string.isRequired,\n}\n\nexport default TreeComponent;\n","examples":[{"name":"ExampleTreeComponent","description":"Custom RFM2 TreeGen made with ReactJS:","code":"import React from 'react';\nimport TreeComponent from 'rfm2-reusable-components/TreeComponent';\nimport HierarchyJson from './internal/Data';\nimport $ from 'jquery';\n\n/** Custom RFM2 TreeGen made with ReactJS: */\nexport default function ExampleTreeComponent() {\n    return <TreeComponent hierarchyJson={HierarchyJson} functionMode={3} htmlId=\"tree1\"\n    pushLabelValue=\"incluir o SubLevel \"\n    unpushAlertText=\"plz choose something\"\n    pushAlertText=\"plz choose something\"   />\n}\n"}]}]